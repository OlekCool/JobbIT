networks:
  dev:

services:
  postgresdb:
    image: postgres:16-alpine
    container_name: jobbit_pg
    restart: unless-stopped
    env_file: ./.env
    environment:
      - POSTGRES_USER=$POSTGRESDB_USER
      - POSTGRES_PASSWORD=$POSTGRESDB_PASSWORD
      - POSTGRES_DB=$POSTGRESDB_DATABASE
      - PGDATA=/var/lib/postgresql/data/pgdata
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks:
      - dev

  nginx:
    image: nginx:stable-alpine
    ports:
      - "80:80"
    volumes:
      - './nginx.conf:/etc/nginx/nginx.conf'
    depends_on:
      - backend
      - frontend
    networks:
      - dev


  backend:
    depends_on:
      - postgresdb
    build:
      context: ./jobbit-back
    container_name: jobbit_backend
    restart: on-failure
    env_file: ./.env
    environment:
      SPRING_APPLICATION_JSON: '{
        "spring.datasource.url"  : "jdbc:postgresql://postgresdb:$POSTGRESDB_DOCKER_PORT/$POSTGRESDB_DATABASE",
        "spring.datasource.username" : "$POSTGRESDB_USER",
        "spring.datasource.password" : "$POSTGRESDB_PASSWORD",
        "spring.jpa.properties.hibernate.dialect" : "org.hibernate.dialect.PostgreSQLDialect",
        "spring.jpa.hibernate.ddl-auto" : "update",
        "spring.mail.username" : "$SPRING_MAIL_USERNAME",
        "spring.mail.password" : "$SPRING_MAIL_PASSWORD"
      }'
    ports:
      - "8080:8080"
    entrypoint: ["java", "-jar", "app.jar"]
    networks:
      - dev

  frontend:
    depends_on:
      - backend
    build:
      context: ./jobbit-client
    container_name: jobbit_frontend
    restart: always
    ports:
      - "3000:3000"
    networks:
      - dev

volumes:
  pgdata: